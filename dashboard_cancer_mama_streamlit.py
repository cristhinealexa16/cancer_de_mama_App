import streamlit as st
import pandas as pd
import plotly.express as px


# =====================
# Dashboard de C√°ncer de Mama - Streamlit
# =====================

# Cargar el CSV limpio

st.set_page_config(layout="wide", page_title="Dashboard C√°ncer de Mama", page_icon="üéÄ", initial_sidebar_state="expanded")



# Eliminar fondo rosado y usar colores predeterminados


st.title("üéÄ Dashboard Interactivo de C√°ncer de Mama")
st.markdown("""
<span style='font-size:18px; color:#E75480;'>
Explora los datos de c√°ncer de mama de manera sencilla y visual. Utiliza los filtros para analizar los casos y entender mejor la informaci√≥n.
</span>
""", unsafe_allow_html=True)

# Colores tem√°ticos para el mes del c√°ncer de mama
color_map = {"Maligno": "#E75480", "Benigno": "#FFC0CB"}  # Rosa fuerte y rosa claro

# Cargar datos
try:
    df = pd.read_csv("cancer_mama_limpio_espanol.csv")
except Exception as e:
    st.error(f"Error al cargar el archivo: {e}")
    st.stop()

# =====================
# Filtros en la barra lateral
# =====================

st.sidebar.header("üéõÔ∏è Filtros de Datos")
st.sidebar.markdown("<span style='color:#E75480;font-size:15px;'>Filtra los datos para personalizar las visualizaciones.</span>", unsafe_allow_html=True)

# Filtro por diagn√≥stico
diagnosticos = sorted(df["Diagn√≥stico"].unique())
diag_sel = st.sidebar.multiselect("Diagn√≥stico", diagnosticos, default=diagnosticos)


# Mostrar las columnas disponibles para ayudar al usuario

# Mostrar las columnas disponibles con descripciones
st.sidebar.markdown("<b><span style='color:#E75480;'>Variables disponibles:</span></b>", unsafe_allow_html=True)
col_descripciones = {
    "Radio_Medio_1": "Radio promedio del tumor (primer an√°lisis)",
    "Textura_Media_1": "Textura promedio del tumor",
    "Per√≠metro_Medio_1": "Per√≠metro promedio",
    "√Årea_Media_1": "√Årea promedio",
    "Diagn√≥stico": "Tipo de tumor (Maligno o Benigno)"
}
for col in df.columns:
    desc = col_descripciones.get(col, "")
    st.sidebar.markdown(f"<span style='color:#E75480'><b>{col}</b></span>: <span style='color:#E75480'>{desc}</span>", unsafe_allow_html=True)

# NUEVO: Secci√≥n informativa y decorativa en la barra lateral
st.sidebar.markdown("<hr>", unsafe_allow_html=True)
st.sidebar.markdown("<span style='color:#E75480;font-size:17px;'><b>üéÄ Mes Rosa</b></span>", unsafe_allow_html=True)
st.sidebar.image("https://upload.wikimedia.org/wikipedia/commons/7/7c/Pink_ribbon.svg", width=80)
st.sidebar.markdown("<span style='color:#E75480;'>El lazo rosa es s√≠mbolo internacional de la concientizaci√≥n sobre el c√°ncer de mama. ¬°Inf√≥rmate y comparte!</span>", unsafe_allow_html=True)
st.sidebar.markdown("<hr>", unsafe_allow_html=True)
st.sidebar.markdown("<span style='color:#E75480;font-size:15px;'>¬øSab√≠as que la detecci√≥n temprana salva vidas? Realiza tus chequeos peri√≥dicos y consulta a tu m√©dico ante cualquier duda.</span>", unsafe_allow_html=True)

# Intentar usar 'Radio_Medio_1', si no existe usar la primera columna que contenga 'Radio' o la primera num√©rica
col_radio = None
for col in df.columns:
    if "radio" in col.lower():
        col_radio = col
        break
if col_radio is None:
    num_cols = df.select_dtypes(include=["int64", "float64"]).columns
    if len(num_cols) > 0:
        col_radio = num_cols[0]
    else:
        st.error("No se encontr√≥ una columna de radio o num√©rica para filtrar.")
        st.stop()

# Filtro por rango de radio
radio_min, radio_max = float(df[col_radio].min()), float(df[col_radio].max())
radio_range = st.sidebar.slider(f"Rango de {col_radio}", radio_min, radio_max, (radio_min, radio_max))

# Aplicar filtros
filtro = (
    df["Diagn√≥stico"].isin(diag_sel) &
    (df[col_radio] >= radio_range[0]) &
    (df[col_radio] <= radio_range[1])
)
df_filtrado = df[filtro]


# =====================
# Distribuci√≥n creativa de los gr√°ficos y tabla
# =====================

st.markdown("<hr style='border:1px solid #E75480;'>", unsafe_allow_html=True)
col1, col2 = st.columns([2, 1])

with col1:
    st.subheader("üìã Casos Filtrados")
    st.markdown("<span style='color:#E75480;'>Esta tabla muestra los casos que cumplen con los filtros seleccionados. Puedes ordenar y buscar dentro de la tabla.</span>", unsafe_allow_html=True)
    st.dataframe(df_filtrado, height=400, use_container_width=True)
    # Bot√≥n para descargar el CSV filtrado
    csv = df_filtrado.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Descargar casos filtrados en CSV",
        data=csv,
        file_name="casos_filtrados_cancer_mama.csv",
        mime="text/csv"
    )
    st.markdown("<span style='color:#222;'>Gr√°fico de pastel que muestra la proporci√≥n de casos malignos y benignos.</span>", unsafe_allow_html=True)
    st.subheader("ü•ß Proporci√≥n de Diagn√≥stico")
    st.markdown("<span style='color:#E75480;'>Gr√°fico de pastel que muestra la proporci√≥n de casos malignos y benignos.</span>", unsafe_allow_html=True)
    grafico_pie = px.pie(
        df_filtrado,
        names="Diagn√≥stico",
        color="Diagn√≥stico",
        color_discrete_map=color_map,
        title="Proporci√≥n de Diagn√≥stico"
    )
    grafico_pie.update_layout()
    st.plotly_chart(grafico_pie, use_container_width=True, key="grafico_pie")

    st.markdown("<span style='color:#E75480;'>Este gr√°fico de barras muestra cu√°ntos casos hay de cada tipo de diagn√≥stico. El color rosa representa los casos benignos y el rosa fuerte los malignos.</span>", unsafe_allow_html=True)
    st.subheader("üìä Casos por Tipo de Diagn√≥stico")
    st.markdown("<span style='color:#E75480;'>Este gr√°fico de barras muestra cu√°ntos casos hay de cada tipo de diagn√≥stico. El color rosa representa los casos benignos y el rosa fuerte los malignos.</span>", unsafe_allow_html=True)
    grafico_barra = px.bar(
        df_filtrado["Diagn√≥stico"].value_counts().reset_index(),
        x="Diagn√≥stico",
        y="count",
        color="Diagn√≥stico",
        color_discrete_map=color_map,
        labels={"Diagn√≥stico": "Tipo de diagn√≥stico", "count": "Cantidad de casos"},
        title="Cantidad de Casos por Diagn√≥stico"
    )
    grafico_barra.update_layout()
    st.plotly_chart(grafico_barra, use_container_width=True, key="grafico_barra1")

    # Gr√°fico de dispersi√≥n: √Årea vs Radio
    if "√Årea_Media_1" in df_filtrado.columns and "Radio_Medio_1" in df_filtrado.columns:
        st.subheader("üî¨ Dispersi√≥n √Årea vs Radio del Tumor")
        fig_disp = px.scatter(
            df_filtrado,
            x="Radio_Medio_1",
            y="√Årea_Media_1",
            color="Diagn√≥stico",
            color_discrete_map=color_map,
            labels={"Radio_Medio_1": "Radio promedio", "√Årea_Media_1": "√Årea promedio"},
            title="Relaci√≥n entre Radio y √Årea del Tumor"
        )
        st.plotly_chart(fig_disp, use_container_width=True)

    # Histograma: Radio del Tumor
    if "Radio_Medio_1" in df_filtrado.columns:
        st.subheader("üìà Histograma del Radio del Tumor")
        fig_hist_radio = px.histogram(
            df_filtrado,
            x="Radio_Medio_1",
            color="Diagn√≥stico",
            color_discrete_map=color_map,
            nbins=20,
            title="Distribuci√≥n del Radio del Tumor"
        )
        st.plotly_chart(fig_hist_radio, use_container_width=True)

   
# =====================
# Clasificaci√≥n por Severidad del Tumor
# =====================

st.subheader("ü©∫ Clasificaci√≥n por Severidad del Tumor")
if "√Årea_Media_1" in df.columns:
    # Calcular percentiles para definir rangos
    q1 = df["√Årea_Media_1"].quantile(0.33)
    q2 = df["√Årea_Media_1"].quantile(0.66)

    def clasificar_severidad(area):
        if area < q1:
            return "Leve"
        elif area < q2:
            return "Moderado"
        else:
            return "Severo"

    df_filtrado["Severidad"] = df_filtrado["√Årea_Media_1"].apply(clasificar_severidad)

    fig_severidad = px.histogram(
        df_filtrado,
        x="Severidad",
        color="Diagn√≥stico",
        barmode="group",
        color_discrete_map=color_map,
        title="Clasificaci√≥n de Tumores por Severidad (basado en √Årea)"
    )
    st.plotly_chart(fig_severidad, use_container_width=True)
else:
    st.warning("No se encontr√≥ la columna '√Årea_Media_1' para clasificar severidad.")



# =====================
# Footer
# =====================

st.markdown("---")
st.markdown("<span style='color:#E75480;font-size:18px;'>üéÄ <b>Mes de Concientizaci√≥n sobre el C√°ncer de Mama</b></span>", unsafe_allow_html=True)
st.markdown("<span style='font-size:15px;'>Los colores del dashboard representan la lucha, esperanza y concientizaci√≥n sobre el c√°ncer de mama. Explora los datos y comparte el conocimiento.</span>", unsafe_allow_html=True)


with st.expander("‚ÑπÔ∏è Explicaci√≥n de variables", expanded=False):
    st.markdown("""
    <span style='color:#E75480;'>
    <b>Variables del Dataset:</b><br>
    <b>Diagn√≥stico</b>: Tipo de tumor (<b>Maligno</b> o <b>Benigno</b>).<br>
    <b>Radio_Medio_1</b>: Radio promedio del tumor (primer an√°lisis).<br>
    <b>Textura_Media_1</b>: Textura promedio del tumor.<br>
    <b>Per√≠metro_Medio_1</b>: Per√≠metro promedio del tumor.<br>
    <b>√Årea_Media_1</b>: √Årea promedio del tumor.<br>
    <b>Suavidad_Media_1</b>: Suavidad promedio del tumor.<br>
    <b>Compacidad_Media_1</b>: Compacidad promedio del tumor.<br>
    <b>Concavidad_Media_1</b>: Concavidad promedio del tumor.<br>
    <b>Puntos_Concavos_Medios_1</b>: Puntos c√≥ncavos medios.<br>
    <b>Simetr√≠a_Media_1</b>: Simetr√≠a promedio.<br>
    <b>Dimensi√≥n_Fractal_Media_1</b>: Dimensi√≥n fractal promedio.<br>
    <b>Edad</b>: Edad de la paciente.<br>
    <b>Hospital</b>: Centro m√©dico donde se realiz√≥ el estudio.<br>
    <b>ID_Paciente</b>: Identificador √∫nico de la paciente.<br>
    <b>Fecha_Diagn√≥stico</b>: Fecha en que se realiz√≥ el diagn√≥stico.<br>
    <b>Observaciones</b>: Comentarios adicionales del m√©dico.<br>
    <br>
    <b>¬øC√≥mo interpretar los gr√°ficos?</b><br>
    <ul>
      <li>El gr√°fico de pastel muestra la proporci√≥n de tumores malignos y benignos.</li>
      <li>El gr√°fico de barras indica la cantidad de casos por tipo de diagn√≥stico.</li>
    <b>¬°Recuerda!</b> Todos los datos son an√≥nimos y sirven para concientizar y educar sobre el c√°ncer de mama.<br>
    </span>
    """, unsafe_allow_html=True)


#   streamlit run "De criss/De criss/dashboard_cancer_mama_streamlit.py"

